name: CI

on:
  push:
    branches:
    - '**'
    tags:
    - 'v[0-9]+.[0-9]+-pre*'
    - 'v[0-9]+.[0-9]+-release*'
    paths:
    - 'src/**'
    - '.github/workflows/ci.yml'

  pull_request:
    branches:
    - master
    paths:
    - 'src/**'
    - '.github/workflows/ci.yml'

env:
  NUGET_PACKAGES_DIR: ${{ github.workspace }}/nuget-packages

jobs:
  build-pack-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./src
    outputs:
      nuget-package-version: ${{ steps.pack.outputs.nuget-package-version }}
      publish-to-docker-hub: ${{ steps.pack.outputs.publish-to-docker-hub }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work

    - name: Build
      run: dotnet build --configuration Release

    - name: Pack
      id: pack
      run: |
        dotnet pack --configuration Release --no-build --output ${{ env.NUGET_PACKAGES_DIR }} ./Vektonn.sln
        echo "::set-output name=nuget-package-version::$NBGV_NuGetPackageVersion"
        if [ "$NBGV_PrereleaseVersion" == "" ]; then PUBLISH_TO_DOCKER_HUB=true ; else PUBLISH_TO_DOCKER_HUB=false ; fi
        echo "PUBLISH_TO_DOCKER_HUB: $PUBLISH_TO_DOCKER_HUB"
        echo "::set-output name=publish-to-docker-hub::$PUBLISH_TO_DOCKER_HUB"

    - name: Store nuget packages as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages
        path: ${{ env.NUGET_PACKAGES_DIR }}/*
        if-no-files-found: error
        retention-days: 10

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal

  nuget-publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-pack-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
    - name: Download nuget packages from artifacts
      uses: actions/download-artifact@v2
      with:
        name: nuget-packages
        path: ${{ env.NUGET_PACKAGES_DIR }}

    - name: Publish to nuget.org
      run: dotnet nuget push ${{ env.NUGET_PACKAGES_DIR }}/*.nupkg --api-key ${{ secrets.NUGET_ORG_API_KEY }} --source https://api.nuget.org/v3/index.json

  docker-publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-pack-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: ./src
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set environment variables
      run: |
        DOCKER_TAG=${{needs.build-pack-and-test.outputs.nuget-package-version}}
        DOCKER_IMAGE_NAME_PREFIX=ghcr.io/${{ github.repository_owner }}
        echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_NAME_AND_TAG_API=$DOCKER_IMAGE_NAME_PREFIX/api-service:$DOCKER_TAG" >> $GITHUB_ENV
        echo "DOCKER_IMAGE_NAME_AND_TAG_INDEX_SHARD=$DOCKER_IMAGE_NAME_PREFIX/index-shard-service:$DOCKER_TAG" >> $GITHUB_ENV

    - name: Build and tag docker images
      run: |
        ./.build-docker-image.sh api-service $DOCKER_IMAGE_NAME_AND_TAG_API
        ./.build-docker-image.sh index-shard-service $DOCKER_IMAGE_NAME_AND_TAG_INDEX_SHARD

    - name: Push docker images to GitHub registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username ${{ github.actor }} --password-stdin
        docker image push $DOCKER_IMAGE_NAME_AND_TAG_API
        docker image push $DOCKER_IMAGE_NAME_AND_TAG_INDEX_SHARD
        docker logout ghcr.io

    - name: Push docker images to DockerHub registry
      if: needs.build-pack-and-test.outputs.publish-to-docker-hub == 'true'
      run: |
        echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login --username vektonn --password-stdin
        docker image tag $DOCKER_IMAGE_NAME_AND_TAG_API vektonn/api-service:latest
        docker image tag $DOCKER_IMAGE_NAME_AND_TAG_API vektonn/api-service:$DOCKER_TAG
        docker image tag $DOCKER_IMAGE_NAME_AND_TAG_INDEX_SHARD vektonn/index-shard-service:latest
        docker image tag $DOCKER_IMAGE_NAME_AND_TAG_INDEX_SHARD vektonn/index-shard-service:$DOCKER_TAG
        docker image push --all-tags vektonn/api-service
        docker image push --all-tags vektonn/index-shard-service
        docker logout
